#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'pepseq'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY)


import logging
import optparse
import pepseq

import gettext
from gettext import gettext as _
gettext.textdomain('pepseq')

LEVELS = (logging.ERROR,
          logging.WARNING,
          logging.INFO,
          logging.DEBUG)


def parse_args():
    usage = _("pepseq [options]")
    parser = optparse.OptionParser(version="pepseq %s" % pepseq.__version__,
                                   usage=usage)
    parser.add_option('-d', '--debug', dest='debug_mode', action='store_true',
        help=_('Print the maximum debugging info (implies -vv)'))
    parser.add_option('-v', '--verbose', dest='logging_level', action='count',
        help=_('set error_level output to warning, info, and then debug'))
    parser.add_option("-f", "--foo", action="store", dest="foo",
                      help=_("foo should be assigned to bar"))
    parser.set_defaults(logging_level=0, foo=None)
    return parser.parse_args()


def main():
    (options, args) = parse_args()

    if options.debug_mode:
        loglevel = 3
    else:
        try:
            loglevel = LEVELS[options.logging_level]
            print 'loglevel: %d, options.logging_level: %d' % (loglevel, options.logging_level)
        except IndexError:
            loglevel = 3

    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s %(message)s')

    if options.foo == 'bar':
        logging.warning(_('easter egg found'))
        print(_("Schweet"))

    print _("I'm launched and my args are: %s") % (" ".join(args))
    logging.debug(_('end of prog'))

if __name__ == "__main__":
    main()
